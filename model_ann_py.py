# -*- coding: utf-8 -*-
"""Model_ANN.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MBanwK-KFQwtzj47Ts8zcsImnbiHZEMG
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

class ANNModel:
    def __init__(self, historic_data_path, prediction_input_path):
        self.historic_data_path = historic_data_path
        self.prediction_input_path = prediction_input_path
        self.model = MLPClassifier(hidden_layer_sizes=(100,), max_iter=50, random_state=42)
        self.X_train = None
        self.y_train = None

    def load_data(self):
        # Loading historic and prediction input data
        historic_data = pd.read_csv(self.historic_data_path)
        prediction_input_data = pd.read_csv(self.prediction_input_path)
        return historic_data, prediction_input_data

    def preprocess_data(self, historic_data, prediction_input_data):
        # Drop unnecessary columns if they exist
        historic_data.drop('item_no', axis=1, errors='ignore', inplace=True)
        prediction_input_data.drop('item_no', axis=1, errors='ignore', inplace=True)

        # One-hot encoding for categorical variables
        historic_data = pd.get_dummies(historic_data, columns=['category', 'main_promotion', 'color'])
        prediction_input_data = pd.get_dummies(prediction_input_data, columns=['category', 'main_promotion', 'color'])
        return historic_data, prediction_input_data

    def train_model(self, X_train, y_train):
        # Training the ANN model
        self.model.fit(X_train, y_train)
        self.X_train = X_train
        self.y_train = y_train

    def test_model(self, X_test, y_test):
        # Testing the trained model
        y_pred = self.model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        precision = precision_score(y_test, y_pred, pos_label=1)
        recall = recall_score(y_test, y_pred, pos_label=1)
        f1 = f1_score(y_test, y_pred, pos_label=1)
        return accuracy, precision, recall, f1

    def predict(self, prediction_input_data):
        # Preprocess prediction input data
        prediction_input_data_processed = pd.get_dummies(prediction_input_data, columns=['category', 'main_promotion', 'color'])
        # Ensure the same columns are present in prediction_input_data_processed as in the training data
        missing_cols = set(self.X_train.columns) - set(prediction_input_data_processed.columns)
        for col in missing_cols:
            prediction_input_data_processed[col] = 0
        prediction_input_data_processed = prediction_input_data_processed[self.X_train.columns]

        # Make predictions using the trained model
        predictions = self.model.predict(prediction_input_data_processed)
        return predictions

if __name__ == "__main__":
    # Creating ANNModel object
    ann_model = ANNModel('/content/sample_data/historic.csv', '/content/sample_data/prediction_input.csv')
    # Loading and preprocessing data
    historic_data, prediction_input_data = ann_model.load_data()
    historic_data_processed, prediction_input_data_processed = ann_model.preprocess_data(historic_data, prediction_input_data)
    X = historic_data_processed.drop('success_indicator', axis=1)
    label_encoder = LabelEncoder()
    y = label_encoder.fit_transform(historic_data_processed['success_indicator']) # Encoding target variable
    # Splitting data into train and test sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    # Training the model
    ann_model.train_model(X_train, y_train)
    # Testing the model
    accuracy, precision, recall, f1 = ann_model.test_model(X_test, y_test)
    print("Accuracy of ANN model:", accuracy)
    print("Precision:", precision)
    print("Recall:", recall)
    print("F1 Score:", f1)
    # Making predictions
    predictions = ann_model.predict(prediction_input_data)
    print("Predictions on the prediction input data:", predictions)